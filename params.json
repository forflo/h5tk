{"name":"H5tk","tagline":"H5tk - An erector like html5 code generation toolkit for lua","body":"# h5tk\r\n\r\nThis module can be used to generate HTML5 code.\r\nIt is very similar to the [erector](http://erector.rubyforge.org/) framework.\r\n\r\n# Installation\r\nIt's on [luarocks](https://luarocks.org/modules/forflo/h5tk)!\r\nJust execute\r\n\r\n    $ sudo luarocks install h5tk\r\n\r\n# Usage\r\nAll functions take a table as input. Each value whose\r\nkey is of type string is interpreted as an attribute for\r\nthe current html tag. Every value whose key is of type number\r\nis considered to be a part of the data \r\nthat should be enclosed between the specified html tags.\r\n\r\nh5tk can be used to produce unformatted and formatted html markup.\r\nIn formatting mode, the number of intendation spaces can be adjusted.\r\nThe toolkit even allows you to use tabs instead of spaces!\r\n\r\n## Initialization\r\nWithout further ado, consider the code below.\r\n\r\n\tlocal builder = require(\"h5tk\")\r\n\thtml_builder1 = builder(format, indent, use_tabs)\r\n\thtml_builder2 = builder(true, 4, false)\r\n\thtml_builder3 = builder(false)\r\n\r\n*format* toggles formatting of the html code (must be a boolean)\r\n*indent* specifies the number of spaces (or tabs) used for each\r\n    indentation level (must be a number)\r\n*use_tabs* switches the indentation character (must be a boolean)\r\n(false: spaces, true: tabs)\r\n\r\nYou can always create new html builders with different\r\nformatting settings. All builders will remain independent\r\nfrom each other, just as they should be.\r\n\t\r\n### Standard init Values\r\n\r\n* *format* = true\r\n* *indent* = 4\r\n* *use_tabs* = false\r\n\r\n## Motivation for h5tk\r\nOn luarocks there is another very similar package called \"htk\".\r\nThere are some drawbacks with this package\r\n* No formatting (The HTML code can not automatically be indentet)\r\n* No support for HTML5 tags\r\n* You can only pass tables of strings to the constructor function.\r\n  h5tk on the other hand, handles every value as expected. You can\r\n  pass functions, tables of functions, tables of tables. All values\r\n  will be reduced (eventually) to a string.\r\n\r\n## Basic workings\r\n\r\n\tio.write(h5tk.emit(h5tk.tr{\r\n\t\tsomeattr = \"attrvalue\"\r\n\t\th5tk.td{\"foo1\"},\r\n\t\th5tk.td{\"foo2\"},\r\n\t\th5tk.td{\"boo3\"},\r\n\t\th5tk.td{\"boo4\"}\r\n\t}))\r\n\t\r\nAfter the first evaluation step, the table that h5tk.tr gets would\r\nlook like this:\r\n\r\n\th5tk.emit(h5tk.tr{someattr = \"attrvalue\", \r\n\t\t\"<td>foo1</td>\", \r\n\t\t\"<td>foo2</td>\", \r\n\t\t\"<td>boo3</td>\", \r\n\t\t\"<td>boo4</td>\"})\r\n\t\t\r\nNow, since someattr is a string key associated with \"attrvalue\", \r\nthe call to h5tk.tr would produce the following code:\r\n\r\n\t<tr someattr=\"attrvalue\">\r\n\t<td>foo1</td>\r\n\t<td>foo2</th>\r\n\t<td>boo3</th>\r\n\t<td>boo4</td>\r\n\t</tr>\r\n\t\r\nThis would also work if we hadn't put all attrname = \"attrvalue\" \r\npairs on top of our table.\r\n\t\t\r\n## Function evaluation\r\nLets put some more data in our table.\r\n\r\n\th5tk.emit(h5tk.tr{someattr = \"attrvalue\",\r\n\t\t(function () \r\n\t\t\treturn h5tr.td{\"funcgenfoo\"} \r\n\t\tend),\r\n\t\th5tr.td{true},\r\n\t\t{\r\n\t\t\t\"nested1\", \r\n\t\t\t\"nested2\", \r\n\t\t\t{\r\n\t\t\t\t\"subnested1\", \r\n\t\t\t\t\"foonested2\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"foo1\", \r\n\t\t\"foo2\", \r\n\t\t\"boo\",  \r\n\t\t\"boo4\"\r\n\t})\r\n\t\r\nLets tackle this step-by-step!\r\n* The function gets evaluated and calls h5tr.td, which, in turn, \r\n  generates a result table that'll be put into the parent table (h5tk.tr{})\r\n* Pure boolean values will be interpreted as \"true\" for true and \"false\" for false\r\n* Sub-tables will act, as if they were not present, meaning that the contained strings or values\r\n  will be put directly into the table that h5tr.tr gets. They also don't have any impact on the\r\n  indentation on the resulting html markup code\r\n\r\n## General type evaluation\r\n\r\n\th5tk.emit(h5tk.tr{\r\n\t\tsomeattr = \"attrvalue\", => \"someattr=\"attrvalue\"\"\r\n\t\t(function () \r\n\t\t\treturn h5tr.td{\"funcgenfoo\"} \r\n\t\tend), => \"<td>funcgenfoo</td>\"\r\n\t\t{\"nested1\", \" nested2\", {\"snest\"}}, => \"nested1 nested2snest\"\r\n\t\t\"string\", => \"string\"\r\n\t\tnil, => \"nil\"\r\n\t\ttrue, => \"true\"\r\n\t\tfalse, => \"false\"\r\n\t\t42 => \"42\"\r\n\t})\r\n\t\r\n\tThe final result:\r\n\t<tr someattr=\"attrvalue\">\r\n\t\t<td>\r\n\t\t\tfuncgenfoo\r\n\t\t</td>\r\n\t\tnested1 nested2snest\r\n\t\tstring\r\n\t\tnil\r\n\t\ttrue\r\n\t\tfalse\r\n\t\t42\r\n\t</tr>\r\n\r\n## Notes\r\n### Special tags\r\nSome HTML5-tags have the following syntax:\r\n\r\n\t<tagname attr=\"attrval\" moreattr=\"attrval\" ...>\r\n\r\nWhich means, as you can see, that they don't have an end-tag, \r\nand don't enclose text data. h5tk handles these tags correctly.\r\nFor example:\r\n\r\n\th5tk.img{src = \"foo.bar.com\"}\r\n\t-- creates without and end tag:\r\n\t<img src=\"foo.bar.com\">\r\n\t\r\nThis is also true for every other tag that acts like this.\r\n\r\n### Boolean attributes\r\nThe dialog tag can have an boolean attribute which is\r\ncommonly denoted as:\r\n\r\n\t<dialog open> ...\r\n\r\nWhile you can't express this with h5tk,\r\n\r\n\t<dialog open=\"\">\r\n\r\nmeans the same thing, which, in fact, you can produce very\r\neasily. This behaviour will change, though.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}